#!/bin/bash

PATH=/bin/:/usr/bin:$PATH
source $OPENSHIFT_CARTRIDGE_SDK_BASH

liberty_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.liberty
java_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.java
server_name=defaultServer
server_pid_file=$liberty_dir/usr/servers/.pid/$server_name.pid
server_dir=$liberty_dir/usr/servers/$server_name
server_package=$server_name.zip
stage_marker=$OPENSHIFT_LIBERTY_DIR/.staged


function isrunning() {
  if [ -f "$server_pid_file" ]
  then
    pid=$(cat $server_pid_file);
    if ps -p $pid 1>&2 > /dev/null
    then
      return 0
    fi
  fi
  return 1
}

function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if lsof -P -n -i "@${OPENSHIFT_LIBERTY_IP}:${OPENSHIFT_LIBERTY_HTTP_PORT}" | grep "(LISTEN)" > /dev/null
    then
      echo "Found ${OPENSHIFT_LIBERTY_IP}:${OPENSHIFT_LIBERTY_HTTP_PORT} listening port"
      return 0
    fi
    let count=${count}+1
    sleep 2
  done
  return 1
}

killtree() {
  local _pid=$1
  for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
    killtree ${_child}
  done
  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ -z "$should_be_gone_pid" ]; then
    return
  else
    # process might have finished stopping after the ps check above
    # so prevent kill from throwing an error (which would exit the script due to bash -e)
    # with || true
    kill -TERM ${_pid} || true
  fi
  local count=0
  while [ ${count} -lt 15 ]
  do
    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
      return
    else
      sleep 2
      let count=${count}+1
    fi
  done
  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ ! -z $should_be_gone_pid ]
  then
    kill -9 ${_pid}
  fi
}

function status() {
  if isrunning
  then
    client_result "app is running"
  else
    client_result "app is stopped"
  fi
}

function extract_archives() {
  echo "searching $1"
  for f in $1/*
  do
    if [[ $f =~ \.war$ ]] || [[ $f =~ \.ear$ ]]
    then
      echo "extracting $f"
      pushd $OPENSHIFT_LIBERTY_DROPLET_DIR 1> /dev/null
        jar xf $f
      popd 1> /dev/null
    fi
  done
}

function deploy() {
  rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/*
  rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/.[a-z]*
  rm -rf $stage_marker
  if [ -f "$OPENSHIFT_REPO_DIR/pom.xml" ]
  then
    echo "found possible build from source"
    extract_archives $OPENSHIFT_REPO_DIR/apps 
  elif [ -f "$OPENSHIFT_REPO_DIR/$server_package" ]
  then
    echo "found possible server package"
    unzip -q $OPENSHIFT_REPO_DIR/$server_package -d $OPENSHIFT_LIBERTY_DROPLET_DIR
    rm -rf $server_dir/logs
    rm -rf $server_dir/workarea
  elif [ -f "$OPENSHIFT_REPO_DIR/server.xml" ]
  then
    echo "found possible server directory"
    rsync -r --exclude ".*" $OPENSHIFT_REPO_DIR/ $OPENSHIFT_LIBERTY_DROPLET_DIR/
  else [ -d "$OPENSHIFT_REPO_DIR/WEB-INF" ]
    echo "found possible WAR or EAR"
    extract_archives $OPENSHIFT_REPO_DIR
  fi
}

function tidy() {
  client_message "deleting Liberty logs in default dir: $OPENSHIFT_LIBERTY_LOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_LOG_DIR/*
  client_message "deleting Liberty transaction logs in default dir: $OPENSHIFT_LIBERTY_TRANLOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_TRANLOG_DIR/*
}

function threaddump() {
  if ! isrunning
  then
    echo "app is stopped"
    exit 1
  else
    dump_file=$OPENSHIFT_LIBERTY_LOG_DIR/threaddump.out
    pid=$(cat $server_pid_file);
    jstack -l $pid >> $dump_file
    client_result "The thread dump file is available at: $dump_file"
  fi
}

function create_credentials() {
  echo "\"credentials\":{\"user\":\"$1\",\"password\":\"$2\",\"host\":\"$3\",\"port\":\"$4\",\"name\":\"$5\",\"uri\":\"$6\"}"
}

function create_vcap_services() {
  var="{"
  # postgresql 9.2
  if [ -n "$OPENSHIFT_POSTGRESQL_DB_HOST" ]
  then
    label="postgresql"
    creds=$(create_credentials $OPENSHIFT_POSTGRESQL_DB_USERNAME $OPENSHIFT_POSTGRESQL_DB_PASSWORD $OPENSHIFT_POSTGRESQL_DB_HOST $OPENSHIFT_POSTGRESQL_DB_PORT $OPENSHIFT_APP_NAME $OPENSHIFT_POSTGRESQL_DB_URL)
    var+="\"$label\":[{\"name\":\"my$label\",\"label\":\"$label\",\"tags\":[\"$label\"],$creds}],"
  fi
  # mysql 5.1 or mariadb 5.5
  if [ -n "$OPENSHIFT_MYSQL_DB_HOST" ]
  then
    label="mysql"
    creds=$(create_credentials $OPENSHIFT_MYSQL_DB_USERNAME $OPENSHIFT_MYSQL_DB_PASSWORD $OPENSHIFT_MYSQL_DB_HOST $OPENSHIFT_MYSQL_DB_PORT $OPENSHIFT_APP_NAME $OPENSHIFT_MYSQL_DB_URL)
    var+="\"$label\":[{\"name\":\"my$label\",\"label\":\"$label\",\"tags\":[\"$label\"],$creds}],"
  fi
  # mongodb 2.2
  if [ -n "$OPENSHIFT_MONGODB_DB_HOST" ]
  then
    label="mongodb"
    creds=$(create_credentials $OPENSHIFT_MONGODB_DB_USERNAME $OPENSHIFT_MONGODB_DB_PASSWORD $OPENSHIFT_MONGODB_DB_HOST $OPENSHIFT_MONGODB_DB_PORT $OPENSHIFT_APP_NAME $OPENSHIFT_MONGODB_DB_URL)
    var+="\"$label\":[{\"name\":\"my$label\",\"label\":\"$label\",\"tags\":[\"$label\"],$creds}],"
  fi
  var="$var}"
  var=$(sed 's/],}/]}/g' <<< $var) # remove trailing comma
  echo $var
}

function stage() {
  if [ ! -f "$stage_marker" ]
  then
    # create env that buildpack expects
    export PORT=$OPENSHIFT_LIBERTY_HTTP_PORT
    export VCAP_APPLICATION={\"host\":\"$OPENSHIFT_LIBERTY_IP\"}
    echo "generated VCAP_APPLICATION=$VCAP_APPLICATION"
    export VCAP_SERVICES=$(create_vcap_services)
    echo "generated VCAP_SERVICES=$VCAP_SERVICES"
    # verify valid app
    type=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/detect $OPENSHIFT_LIBERTY_DROPLET_DIR)
    echo $type
    # build droplet that contains everything needed to run app
    out=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/compile $OPENSHIFT_LIBERTY_DROPLET_DIR $OPENSHIFT_LIBERTY_CACHE_DIR)
    echo $out
    # metadata indicating how script should be executed
    metadata=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/release $OPENSHIFT_LIBERTY_DROPLET_DIR)
    echo $metadata
    # only way server will start on openshift is with command port disabled
    echo "command.port=-1" >> $server_dir/bootstrap.properties
    # fix host - in openshift we need specific host not *
    sed -i 's/host="\*"/host="${host}"/g' $server_dir/server.xml
    # add env vars to server.xml
    $liberty_dir/create_vars.rb $server_dir/runtime-vars.xml
    # not needed in openshift
    sed -i '/-Dcom.ibm.tx.jta.disable2PC=true/d' $server_dir/jvm.options
    sed -i '/-XX:OnOutOfMemoryError=.\/.buildpack-diagnostics\/killjava/d' $server_dir/jvm.options
  fi
  touch $stage_marker
}

function start() {
  if isrunning
  then
    echo "app is already running"
  else
    stage
    if marker_present "clean_start"
    then
      opts="--clean"
    else
      opts=""
    fi
    if marker_present "enable_jpda"
    then
      echo "starting Liberty cartridge in debug mode"
      JAVA_HOME=$java_dir $liberty_dir/bin/server debug $server_name 1>&2 > /dev/null &
      echo $! > $server_pid_file
    else
      echo "starting Liberty cartridge"
      JAVA_HOME=$java_dir $liberty_dir/bin/server start $server_name 1>&2 > /dev/null &
    fi
    rc=0
    ishttpup || rc=$?
    if [ $rc -eq 1 ]
    then
      echo "Timed out waiting for http listening port for Liberty"
      exit 1
    fi
  fi
}

function stop() {
  if isrunning
  then
    pid=$(cat $server_pid_file);
    killtree $pid
  else
    echo "app is not running"
  fi
}

function restart() {
  stop
  start
}

case "$1" in
  start)	start ;;
  stop)		stop ;;
  restart)	restart ;;
  reload)	restart ;;
  build)	$OPENSHIFT_LIBERTY_DIR/bin/build ;;
  deploy)	deploy ;; 
  tidy)		tidy ;;
  threaddump)	threaddump ;;
  status)	status ;;
  *)		exit 0
esac

exit 0
