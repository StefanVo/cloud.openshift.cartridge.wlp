#!/bin/bash -e

PATH=/bin/:/usr/bin:$PATH
source $OPENSHIFT_CARTRIDGE_SDK_BASH

LIBERTY_PID_FILE=$OPENSHIFT_LIBERTY_DIR/servers/.pid/defaultServer.pid

function isrunning() {
  if [ -f "$LIBERTY_PID_FILE" ]
  then
    pid=$(cat $LIBERTY_PID_FILE);
    if ps -p $pid 1>&2 > /dev/null
    then
      return 0
    fi
  fi
  return 1
}

function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if lsof -P -n -i "@${OPENSHIFT_LIBERTY_IP}:${OPENSHIFT_LIBERTY_HTTP_PORT}" | grep "(LISTEN)" > /dev/null
    then
      echo "Found ${OPENSHIFT_LIBERTY_IP}:${OPENSHIFT_LIBERTY_HTTP_PORT} listening port"
      return 0
    fi
    let count=${count}+1
    sleep 2
  done
  return 1
}

function start {
  if isrunning
  then
    echo "app is already running"
  else
    if [ "$IBM_LIBERTY_LICENSE" == "L-JTHS-95XRL8" ]
    then
      opts=""
      if marker_present "clean_start"
      then
        opts="--clean"
      fi
      if marker_present "enable_jpda"
      then
        echo "starting Liberty cartridge in debug mode"
        $OPENSHIFT_LIBERTY_DIR/wlp/bin/server debug defaultServer $opts 1>&2 > /dev/null &
        echo $! > $LIBERTY_PID_FILE
      else
        echo "starting Liberty cartridge"
        $OPENSHIFT_LIBERTY_DIR/wlp/bin/server start defaultServer $opts 1>&2 > /dev/null &
      fi
      rc=0
      ishttpup || rc=$?
      if [ $rc -eq 1 ]
      then
        echo "Timed out waiting for http listening port for Liberty"
        exit 1
      fi
    else
      echo "missing Liberty license, set IBM_LIBERTY_LICENSE env var"
      exit 1
    fi
  fi
}

function stop {
  if isrunning
  then
    pid=$(cat $LIBERTY_PID_FILE);
    pkill -P $pid || true
    kill $pid || true
  else
    echo "app is not running"
  fi
}

function restart {
  stop
  sleep 5 # wait for port to be released
  start
}

function status {
  if isrunning
  then
    client_result "app is running"
  else
    client_result "app is stopped"
  fi
}

function reload {
  restart
}

function tidy {
  client_message "deleting Liberty logs in default dir: $OPENSHIFT_LIBERTY_LOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_LOG_DIR/*
  client_message "deleting Liberty transaction logs in default dir: $OPENSHIFT_LIBERTY_TRANLOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_TRANLOG_DIR/*
}

function deploy {
  echo "Deploying Liberty"
  # normal openshift mode, like template app
  if [ -d ${OPENSHIFT_REPO_DIR}/.openshift/config ]
  then
    rsync -r --exclude ".*" ${OPENSHIFT_REPO_DIR}/.openshift/config/ ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/
  fi
  # server directory hybrid with .openshift
  if [ -d ${OPENSHIFT_REPO_DIR}/apps ]
  then
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/apps/ ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/apps/
  fi
  if [ -d ${OPENSHIFT_REPO_DIR}/dropins ]
  then
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/dropins/ ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/dropins/
  fi
  # server package
  if [ -e ${OPENSHIFT_REPO_DIR}/defaultServer.zip ]
  then
    rm -rf ${OPENSHIFT_TMP_DIR}/wlp
    unzip ${OPENSHIFT_REPO_DIR}/defaultServer.zip -d ${OPENSHIFT_TMP_DIR}
    rsync -r --delete ${OPENSHIFT_TMP_DIR}/wlp/usr/servers/defaultServer/ ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/
    # cleanup
    rm -rf ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/logs
    rm -rf ${OPENSHIFT_LIBERTY_DIR}/servers/defaultServer/workarea
    rm -rf ${OPENSHIFT_TMP_DIR}/wlp
  fi
}

function threaddump() {
  if ! isrunning
  then
    echo "app is stopped"
    exit 1
  else
    dump_file=$OPENSHIFT_LIBERTY_LOG_DIR/threaddump.out
    pid=$(cat $LIBERTY_PID_FILE);
    jstack -l $pid >> $dump_file
    client_result "The thread dump file is available at: $dump_file"
  fi
}

case "$1" in
  start)       start ;;
  stop)        stop ;;
  restart)     restart ;;
  status)      status ;;
  reload)      reload ;;
  tidy)        tidy ;;
  build)       
    ${OPENSHIFT_LIBERTY_DIR}/bin/build
  ;;
  deploy)      deploy ;;
  threaddump)  threaddump ;;
  *)           exit 0
esac

exit 0
