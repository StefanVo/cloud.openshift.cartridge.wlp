#!/bin/bash -e

PATH=/bin/:/usr/bin:$PATH
source $OPENSHIFT_CARTRIDGE_SDK_BASH

liberty_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.liberty
java_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.java
server_name=defaultServer
server_pid_file=$liberty_dir/servers/.pid/$server_name.pid
server_dir=$liberty_dir/usr/servers/$server_name
server_package=$server_name.zip


function isrunning() {
  if [ -f "$server_pid_file" ]
  then
    pid=$(cat $server_pid_file);
    if ps -p $pid 1>&2 > /dev/null
    then
      return 0
    fi
  fi
  return 1
}

function start() {
  # create env that buildpack expects
  export PORT=$OPENSHIFT_LIBERTY_HTTP_PORT
  export VCAP_APPLICATION={\"host\":\"$OPENSHIFT_LIBERTY_IP\"}
  # build droplet that contains everything needed to run app
  out=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/compile $OPENSHIFT_LIBERTY_DROPLET_DIR $OPENSHIFT_LIBERTY_CACHE_DIR)
  echo $out
  # metadata indicating how script should be executed
  metadata=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/release $OPENSHIFT_LIBERTY_DROPLET_DIR)
  echo $metadata
  # only way server will start on openshift is with command port disabled
  echo "command.port=-1" >> $server_dir/bootstrap.properties
  # fix host - in openshift we need specific host
  sed -i 's/host="\*"/host="${host}"/g' $server_dir/server.xml
  # actually start server
  #TODO use output of release phase
  $liberty_dir/create_vars.rb $server_dir/runtime-vars.xml
  JAVA_HOME=$java_dir $liberty_dir/bin/server start $server_name 1>&2 > /dev/null &
}

function stop() {
  #TODO
  echo
}

function restart() {
  stop
  start
}

function status() {
  if isrunning
  then
    client_result "app is running"
  else
    client_result "app is stopped"
  fi
}

function deploy() {
  rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/*
  rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/.[a-z]*
  type=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/detect $OPENSHIFT_REPO_DIR)
  echo $type
  # server package
  if [[ $type =~ "Liberty-SVR-PKG" ]]
  then
    unzip $OPENSHIFT_REPO_DIR/$server_package -d $OPENSHIFT_LIBERTY_DROPLET_DIR
    rm -rf $server_dir/logs
    rm -rf $server_dir/workarea
  # server directory
  elif [[ $type =~ "Liberty-SVR-DIR*" ]]
  then
    cp -R $OPENSHIFT_REPO_DIR/* $OPENSHIFT_LIBERTY_DROPLET_DIR/
  # war or ear built from source
  elif [ -f $OPENSHIFT_REPO_DIR/built/*.war ] || [ -f $OPENSHIFT_REPO_DIR/built/*.ear ]
  then
    pushd $OPENSHIFT_LIBERTY_DROPLET_DIR 1> /dev/null
      jar xf $OPENSHIFT_REPO_DIR/built/*.war #TODO ear, multiple files 
    popd 1> /dev/null
  else
    echo "application format not valid"
    return 1
  fi
}

function tidy() {
  #TODO
  echo
}

function threaddump() {
  #TODO
  echo
}

case "$1" in
  start)	start ;;
  stop)		stop ;;
  restart)	restart ;;
  reload)	restart ;;
  build)	$OPENSHIFT_LIBERTY_DIR/bin/build ;;
  deploy)	deploy ;; 
  tidy)		tidy ;;
  threaddump)	threaddump ;;
  status)	status ;;
  *)		exit 0
esac

exit 0
