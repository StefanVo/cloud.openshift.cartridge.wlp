#!/bin/bash -e
# Copyright (c) 2014 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source $OPENSHIFT_CARTRIDGE_SDK_BASH

liberty_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.liberty
java_dir=$OPENSHIFT_LIBERTY_DROPLET_DIR/.java
server_name=defaultServer
server_pid_dir=$liberty_dir/usr/servers/.pid
server_pid_file=$server_pid_dir/$server_name.pid
server_dir=$liberty_dir/usr/servers/$server_name
services_hash_file=$OPENSHIFT_LIBERTY_DIR/.services
restage_marker=$OPENSHIFT_LIBERTY_DIR/.app
start_script_name=.start_cmd


function isrunning() {
  if [ -f "$server_pid_file" ]; then
    pid=$(cat $server_pid_file);
    if ps -p $pid 1>&2 > /dev/null; then
      return 0
    fi
  fi
  return 1
}

function ishttpup() {
  count=0
  while [ ${count} -lt 64 ]
  do
    if echo 2> /dev/null > "/dev/tcp/${OPENSHIFT_LIBERTY_IP}/${OPENSHIFT_LIBERTY_HTTP_PORT}"; then
      echo "Found ${OPENSHIFT_LIBERTY_IP}:${OPENSHIFT_LIBERTY_HTTP_PORT} listening port"
      return 0
    fi
    let count=${count}+1
    sleep 2
  done
  return 1
}

killtree() {
  local _pid=$1
  for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
    killtree ${_child}
  done
  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ -z "$should_be_gone_pid" ]; then
    return
  else
    # process might have finished stopping after the ps check above
    # so prevent kill from throwing an error (which would exit the script due to bash -e)
    # with || true
    kill -TERM ${_pid} || true
  fi
  local count=0
  while [ ${count} -lt 15 ]
  do
    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
      return
    else
      sleep 2
      let count=${count}+1
    fi
  done
  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ ! -z "$should_be_gone_pid" ]; then
    kill -9 ${_pid}
  fi
}

function status() {
  if isrunning; then
    client_result "app is running"
  else
    client_result "app is stopped"
  fi
}

function extract_archives() {
  for f in $1/*
  do
    if [[ $f =~ \.war$ ]] || [[ $f =~ \.ear$ ]]; then
      echo "found $f"
      pushd $OPENSHIFT_LIBERTY_DROPLET_DIR 1> /dev/null
        jar xf $f
      popd 1> /dev/null
    fi
  done
}

function deploy() {
  rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/*
  touch $restage_marker
  if [ -f "$OPENSHIFT_REPO_DIR/pom.xml" ]; then
    echo "found possible build from source"
    extract_archives $OPENSHIFT_REPO_DIR/apps 
  elif ls $OPENSHIFT_REPO_DIR/*.zip 1>&2 > /dev/null; then
    echo "found possible server package"
    unzip -q $(ls $OPENSHIFT_REPO_DIR/*.zip) -d $OPENSHIFT_LIBERTY_DROPLET_DIR
    mv $OPENSHIFT_LIBERTY_DROPLET_DIR/wlp/usr/servers/* $OPENSHIFT_LIBERTY_DROPLET_DIR/wlp/usr/servers/$server_name
    rm -rf $server_dir/logs
    rm -rf $server_dir/workarea
  elif [ -f "$OPENSHIFT_REPO_DIR/server.xml" ]; then
    echo "found possible server directory"
    rsync -r --exclude ".*" $OPENSHIFT_REPO_DIR/ $OPENSHIFT_LIBERTY_DROPLET_DIR/
  else
    echo "found possible WAR or EAR"
    extract_archives $OPENSHIFT_REPO_DIR
  fi
}

function tidy() {
  client_message "deleting Liberty logs in default dir: $OPENSHIFT_LIBERTY_LOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_LOG_DIR/*
  client_message "deleting Liberty transaction logs in default dir: $OPENSHIFT_LIBERTY_TRANLOG_DIR"
  rm -rf $OPENSHIFT_LIBERTY_TRANLOG_DIR/*
}

function stage() {
  # create env that buildpack expects
  export PORT=$OPENSHIFT_LIBERTY_HTTP_PORT
  export VCAP_APPLICATION={\"host\":\"$OPENSHIFT_LIBERTY_IP\"}
  export VCAP_SERVICES=$($OPENSHIFT_LIBERTY_DIR/bin/auto_config)
  export MEMORY_LIMIT="$OPENSHIFT_GEAR_MEMORY_MB"m
  # service info hash so we can check if service carts have been added/removed and we need to restage
  services_hash=($(echo $VCAP_SERVICES $SERVICE_NAME_MAP $services_autoconfig_excludes $JAVA_OPTS | md5sum))
  old_services_hash=$(cat $services_hash_file) 
  echo $services_hash > $services_hash_file
  if [ -f "$restage_marker" ] || [ "$services_hash" != "$old_services_hash" ]; then
    rm -rf $OPENSHIFT_LIBERTY_DROPLET_DIR/.[a-z]*
    echo "generated VCAP_APPLICATION=$VCAP_APPLICATION"
    echo "generated VCAP_SERVICES=$VCAP_SERVICES"
    # verify valid app
    set +e
    type=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/detect $OPENSHIFT_LIBERTY_DROPLET_DIR 2>&1)
    rc=$?
    echo $type
    if [ $rc -ne 0 ]; then
      exit 1
    fi
    # build droplet that contains everything needed to run app
    out=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/compile $OPENSHIFT_LIBERTY_DROPLET_DIR $OPENSHIFT_LIBERTY_CACHE_DIR 2>&1)
    rc=$?
    echo $out
    if [ $rc -ne 0 ]; then
      exit 1
    fi
    # metadata indicating how script should be executed
    metadata=$($OPENSHIFT_LIBERTY_BUILDPACK_DIR/bin/release $OPENSHIFT_LIBERTY_DROPLET_DIR 2>&1)
    rc=$?
    echo $metadata
    if [ $rc -ne 0 ]; then
      exit 1
    fi
    set -e
    # save start command generated by buildpack for later
    start_cmd=$(echo "$metadata" | oo-ruby -e "require 'yaml'; puts YAML.load(ARGF.read)['default_process_types']['web']")
    echo $start_cmd > $OPENSHIFT_LIBERTY_DROPLET_DIR/$start_script_name
    chmod u+x $OPENSHIFT_LIBERTY_DROPLET_DIR/$start_script_name
    # only way server will start on openshift is with command port disabled
    echo "command.port=-1" >> $server_dir/bootstrap.properties
    # fix host - in openshift we need specific host not *
    sed -i 's/host="\*"/host="${host}"/g' $server_dir/server.xml
    # distributed transactions work in openshift
    sed -i '/-Dcom.ibm.tx.jta.disable2PC=true/d' $server_dir/jvm.options
    sed -i "s|</server>|<transaction transactionLogDirectory=\"$OPENSHIFT_LIBERTY_TRANLOG_DIR\" /></server>|g" $server_dir/server.xml
    # staging complete
    rm -rf $restage_marker
  fi
}

function join_jvm_args() {
  local IFS="$1"
  shift
  if [ "$*" == "" ]; then
    echo ""
  else
    echo "\"\"$*\"\""
  fi
}

function start() {
  if [ -z "$IBM_LIBERTY_LICENSE" ]; then
    echo "missing Liberty license, set IBM_LIBERTY_LICENSE env var" # in a Jenkins build this won't be set but it's okay to not stage and start
  elif isrunning; then
    echo "app is already running"
  elif [ -n "$SKIP_STAGING" ]; then
    echo "skipping buildpack staging, app is not started"
  else
    stage
    if marker_present "enable_jpda"; then
      debug_args=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$OPENSHIFT_LIBERTY_IP:$OPENSHIFT_LIBERTY_JPDA_PORT
    fi
    # in CF the DEA would run a similar start command based on bin/release output
    echo "starting Liberty cartridge"
    jvm_args=$(join_jvm_args " " $debug_args $JVM_ARGS)
    echo "JVM_ARGS=$jvm_args"
    pushd $OPENSHIFT_LIBERTY_DROPLET_DIR/
      JVM_ARGS=$jvm_args ./$start_script_name 1>&2 > /dev/null &
    popd 
    mkdir -p $server_pid_dir
    echo $! > $server_pid_file
    rc=0
    ishttpup || rc=$?
    if [ $rc -eq 1 ]; then
      echo "Timed out waiting for http listening port for Liberty"
      exit 1
    fi
  fi
}

function stop() {
  if isrunning; then
    pid=$(cat $server_pid_file);
    killtree $pid
    sleep 3
  else
    echo "app is not running"
  fi
}

function restart() {
  stop
  start
}

case "$1" in
  start)	start ;;
  stop)		stop ;;
  restart)	restart ;;
  reload)	restart ;;
  build)	$OPENSHIFT_LIBERTY_DIR/bin/build ;;
  deploy)	deploy ;; 
  tidy)		tidy ;;
  status)	status ;;
  *)		exit 0
esac

